package personas;

import interfaces.DAOEmpleadoImplementacion;
import javax.swing.JOptionPane;

public class Diseño extends javax.swing.JFrame {

    /**
     * Creates new form Diseño
     */
    public Diseño() {
        // === inicializar formulario | centrar en pantalla | título ===
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("CRUD con DAO");
    }

    private void limpiar() {
        // ======================
        // === LIMPIAR formulario ===
        // ======================
        cajaTexto_ID.setText("");
        cajaTexto_Nombre.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cajaTexto_ID = new javax.swing.JTextField();
        cajaTexto_Nombre = new javax.swing.JTextField();
        botonRegistrar = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        botonBuscar = new javax.swing.JButton();
        botonModificar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Digite su ID:");

        jLabel2.setText("Digite su Nombre:");

        botonRegistrar.setText("Registrar");
        botonRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegistrarActionPerformed(evt);
            }
        });

        botonEliminar.setText("Eliminar");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        botonBuscar.setText("Buscar");
        botonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBuscarActionPerformed(evt);
            }
        });

        botonModificar.setText("Modificar");
        botonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonModificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(botonRegistrar)
                        .addGap(18, 18, 18)
                        .addComponent(botonEliminar)
                        .addGap(18, 18, 18)
                        .addComponent(botonBuscar)
                        .addGap(18, 18, 18)
                        .addComponent(botonModificar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cajaTexto_Nombre)
                            .addComponent(cajaTexto_ID))))
                .addContainerGap(93, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cajaTexto_ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cajaTexto_Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonRegistrar)
                    .addComponent(botonEliminar)
                    .addComponent(botonBuscar)
                    .addComponent(botonModificar))
                .addContainerGap(290, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRegistrarActionPerformed
        // =================
        // === REGISTRAR ===
        // =================

        // === instancia de la clase DAOEmpleadoImplementacion ===
        DAOEmpleadoImplementacion empleado_dao = new DAOEmpleadoImplementacion();

        // === instancia de la clase Empleado ===
        Empleado empleado = new Empleado();

        // === validar que no se introduzcan campos vacios ===
        if (cajaTexto_ID.getText().equals("") || cajaTexto_Nombre.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese su ID y Nombre");
        } else {
            // === se han introducido los camppos correctamente ===            
            // === capturar los datos de los inputs | ID y nombre ===
            int id = Integer.parseInt(cajaTexto_ID.getText());
            String nombre = cajaTexto_Nombre.getText();

            // === insertar contenido capturado al objeto tipo "empleado" ===
            empleado.setId(id);
            empleado.setEmpleado(nombre);
            empleado_dao.registrar(empleado);

            // === mensaje de confirmación ===
            JOptionPane.showMessageDialog(null, "Registrado con éxito");

            // === limpiar inputs del formulario ===
            limpiar();
        }

    }//GEN-LAST:event_botonRegistrarActionPerformed

    private void botonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBuscarActionPerformed
        // ===============
        // === BUSCAR ===
        // ===============

        // === instancia de la clase DAOEmpleadoImplementacion ===
        DAOEmpleadoImplementacion empleado_dao = new DAOEmpleadoImplementacion();

        // === instancia de la clase Empleado ===
        Empleado empleado = new Empleado();

        // === BUSCAR por ID en el input del formulario | si no hay nada NO buscar ===
        if (cajaTexto_ID.getText().equals("")) {
            // === si está vacio el input ===
            JOptionPane.showMessageDialog(null, "Por favor ditite el ID a buscar");
        } else {
            // === si hay ID en el input del formulario | buscarlos ===
            // === guardar/capturar el valor del input ===
            int id = Integer.parseInt(cajaTexto_ID.getText());
            // === establecer lo que capturamos ===
            empleado.setId(id);
            // === pasar este objeto como parámetro para buscar el objeto tipo empleado ===
            empleado_dao.buscar(empleado);
            // === obtener los datos ===
            cajaTexto_ID.setText(String.valueOf(empleado.getId()));
            cajaTexto_Nombre.setText(empleado.getEmpleado());
            // === mensaje de confirmación ===
            JOptionPane.showMessageDialog(null, "Registro encontrado");
        }

    }//GEN-LAST:event_botonBuscarActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        // ===============
        // === ELIMINAR ===
        // ===============

        // === instancia de la clase DAOEmpleadoImplementacion ===
        DAOEmpleadoImplementacion empleado_dao = new DAOEmpleadoImplementacion();

        // === instancia de la clase Empleado ===
        Empleado empleado = new Empleado();
        
        // === ELIMINAR por ID en el input del formulario | si no hay nada NO eliminar ===
        if (cajaTexto_ID.getText().equals("")) {
            // === si está vacio el input ===
            JOptionPane.showMessageDialog(null, "Por favor, ingrese un ID a eliminiar");
        } else {
            // === si hay ID en el input del formulario | eliminarlo ===
            // === guardar/capturar el valor del input ===
            int id = Integer.parseInt(cajaTexto_ID.getText());
            // === establecer lo que capturamos ===
            empleado.setId(id);
            // === pasar este objeto como parámetro para buscar el objeto tipo empleado ===
            empleado_dao.eliminar(empleado);            
            // === limpiar inputs del formulario ===
            limpiar();
            // === mensaje de confirmación ===
            JOptionPane.showMessageDialog(null, "Registro eliminado");
            
        }

    }//GEN-LAST:event_botonEliminarActionPerformed

    private void botonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonModificarActionPerformed
        // =================
        // === MODIFICAR ===
        // =================
        
        // === instancia de la clase DAOEmpleadoImplementacion ===
        DAOEmpleadoImplementacion empleado_dao = new DAOEmpleadoImplementacion();

        // === instancia de la clase Empleado ===
        Empleado empleado = new Empleado();
        
        // === MODIFICAR por ID en el input del formulario | si no hay nada NO modificar ===
        if (cajaTexto_ID.getText().equals("") || cajaTexto_Nombre.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese su ID y Nombre a modificar");
        } else {
            // === si hay ID y NOMBRE en los inputs del formulario | modificarlos ===
            // === guardar/capturar los valores de los inputs ===
            int id = Integer.parseInt(cajaTexto_ID.getText());
            String nombre = cajaTexto_Nombre.getText();
            // === establecer/modificar lo que capturamos ===
            empleado.setId(id);
            empleado.setEmpleado(nombre);
            // === pasar este objeto como parámetro para buscar el objeto tipo empleado ===
            empleado_dao.modificar(empleado);            
            // === limpiar inputs del formulario ===
            limpiar();
            // === mensaje de confirmación ===
            JOptionPane.showMessageDialog(null, "Registro modificado");
        }       
        
    }//GEN-LAST:event_botonModificarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Diseño.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Diseño.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Diseño.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Diseño.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Diseño().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonBuscar;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonModificar;
    private javax.swing.JButton botonRegistrar;
    private javax.swing.JTextField cajaTexto_ID;
    private javax.swing.JTextField cajaTexto_Nombre;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
